#########################################
#
# Regressors
#
# Written by ViolentBeetle
#
#########################################

namespace = mem_regressors
@tier1materialreward = 6
@tier1materialmin = 100
@tier1materialmax = 500
@tier2materialreward = 12
@tier2materialmin = 150
@tier2materialmax = 1000
@tier3materialreward = 18
@tier3materialmin = 250
@tier3materialmax = 1500
@tier4materialreward = 24
@tier4materialmin = 350
@tier4materialmax = 2000
@tier5materialreward = 48
@tier5materialmin = 700
@tier5materialmax = 4000

@tier1influencereward = 6
@tier1influencemin = 40
@tier1influencemax = 100
@tier2influencereward = 12
@tier2influencemin = 80
@tier2influencemax = 175
@tier3influencereward = 18
@tier3influencemin = 125
@tier3influencemax = 250
@tier4influencereward = 24
@tier4influencemin = 150
@tier4influencemax = 300
@tier5influencereward = 36
@tier5influencemin = 250
@tier5influencemax = 500
@tier6influencereward = 48
@tier6influencemin = 300
@tier6influencemax = 600

@tier1researchreward = 6
@tier1researchmin = 60
@tier1researchmax = 150
@tier2researchreward = 12
@tier2researchmin = 90
@tier2researchmax = 250
@tier3researchreward = 18
@tier3researchmin = 120
@tier3researchmax = 350
@tier4researchreward = 24
@tier4researchmin = 150
@tier4researchmax = 500
@tier5researchreward = 48
@tier5researchmin = 300
@tier5researchmax = 1000

@MTTH = 800
@MTTH_SUCCESS = 60

#####################
#ON ACTION AND DEBUG#
#####################


#Seeding galaxy with primitives
event = {
	id = mem_regressors.1
	
	hide_window = yes
	
	is_triggered_only = yes
	
	fire_only_once = yes
	
	trigger = {
		count_country = { # We need to spare some
			limit = {
				is_country_type = primitive
				NOT = {
					capital_scope = {
						solar_system = { has_star_flag = sol }
					}
				}
				OR = {
					has_country_flag = stone_age
					has_country_flag = bronze_age
					has_country_flag = iron_age
					has_country_flag = late_medieval_age
					has_country_flag = renaissance_age
					has_country_flag = steam_age
					has_country_flag = industrial_age
					has_country_flag = machine_age
					has_country_flag = atomic_age
					has_country_flag = early_space_age
				}
			}
			count > 5
		}
	}

	immediate = {
		random_country = {
			limit = {
				is_country_type = primitive
				NOT = { has_ethic = ethic_hive_mind }
				NOT = {
					capital_scope = {
						solar_system = { has_star_flag = sol }
					}
				}
				OR = {
					has_country_flag = stone_age
					has_country_flag = bronze_age
					has_country_flag = iron_age
					has_country_flag = late_medieval_age
					has_country_flag = renaissance_age
					has_country_flag = steam_age
					has_country_flag = industrial_age
					has_country_flag = machine_age
					has_country_flag = atomic_age
					has_country_flag = early_space_age
				}
			}
			save_event_target_as = first_civ
			
			#Ethic blanket cleanup
			country_remove_ethic = ethic_xenophile
			country_remove_ethic = ethic_xenophobe
			country_remove_ethic = ethic_pacifist
			country_remove_ethic = ethic_militarist
			country_remove_ethic = ethic_materialist
			country_remove_ethic = ethic_spiritualist
			country_remove_ethic = ethic_authoritarian
			country_remove_ethic = ethic_egalitarian
			country_remove_ethic = ethic_fanatic_xenophile
			country_remove_ethic = ethic_fanatic_xenophobe
			country_remove_ethic = ethic_fanatic_pacifist
			country_remove_ethic = ethic_fanatic_militarist
			country_remove_ethic = ethic_fanatic_materialist
			country_remove_ethic = ethic_fanatic_spiritualist
			country_remove_ethic = ethic_fanatic_authoritarian
			country_remove_ethic = ethic_fanatic_egalitarian
			
			# country_add_ethic = ethic_xenophobe
			country_add_ethic = ethic_militarist
			country_add_ethic = ethic_fanatic_authoritarian
			
			change_government = {
				authority = auth_dictatorial
				civics = {
					civic = civic_mem_war_is_peace
					civic = civic_mem_freedom_is_slavery
				}
			}
			change_country_flag = {
				icon = {
					category = "blocky"
					file = "flag_blocky_12.dds"
				}
				background= {
					category = "backgrounds"
					file = "00_solid.dds"
				}
				colors = {
					"black"
					"black"
					"null"
					"null"
				}
			}
			
			#Cleanup from vanilla
			remove_country_flag = stone_age
			remove_country_flag = bronze_age
			remove_country_flag = iron_age
			remove_country_flag = late_medieval_age
			remove_country_flag = renaissance_age
			remove_country_flag = steam_age
			remove_country_flag = industrial_age
			remove_country_flag = machine_age
			remove_country_flag = atomic_age
			remove_country_flag = early_space_age
			every_owned_fleet = {
				destroy_fleet = this
			}
			every_owned_army = {
				remove_army = yes
			}
			set_graphical_culture = industrial_01
			
			set_country_flag = mem_regressors_first_civ
			set_country_flag = mem_regressors_post_inflection
			set_primitive_age = mem_regressors_post_inflection
			
			capital_scope = {
				every_tile = {
					limit = { has_building = yes }
					remove_building = yes
				}
				every_tile = {
					limit = { has_blocker = yes }
					remove_blocker = yes
				}
				while = {
					count = 2
					random_tile = {
						limit = { has_blocker = no }
						set_blocker = tb_failing_infrastructure
					}
					random_tile = {
						limit = { has_blocker = no }
						set_blocker = tb_decrepit_dwellings
					}
					random_tile = {
						limit = { has_blocker = no }
						set_blocker = tb_crater
					}
				}
				every_tile = {
					limit = { has_pop = no has_blocker = no }
					create_pop = {
						species = owner
					}
				}
				every_owned_pop = {
					random_list = {
						# 33 = { pop_change_ethic = ethic_xenophobe }
						66 = { pop_change_ethic = ethic_authoritarian }
						33 = { pop_change_ethic = ethic_militarist }
					}
				}
				while = {
					count = 6
					create_army = {
						name = "NAME_Industrial_Army"
						owner = prev
						species = prev
						type = "industrial_army"
					}
				}
				while = {
					count = 3
					random_tile = {
						limit = { has_blocker = no has_building = no }
						set_building = mem_regressors_ministry
						clear_deposits = yes
					}
				}
				while = {
					limit = {
						any_tile = { has_blocker = no has_building = no }
					}
					random_tile = {
						limit = { has_blocker = no has_building = no }
						set_building = building_primitive_farm
						add_resource = {
							resource = food
							amount = 1
							replace = yes
						}
					}
					random_tile = {
						limit = { has_blocker = no has_building = no }
						set_building = building_primitive_factory
						add_resource = {
							resource = minerals
							amount = 1
							replace = yes
						}
					}
				}
				every_tile = {
					limit = { has_blocker = yes }
					clear_deposits = yes
				}
				
				solar_system = {
					set_star_flag = mem_regressors_first_solar_system
					set_star_flag = mem_regressors_pi_system
					save_event_target_as = first_system
				}
			}
		}
		
		event_target:first_system = {
			#Picking second civ
			closest_system = {
				limit = {
					NOT = { has_star_flag = mem_regressors_pi_system }
					NOT = { has_star_flag = sol }
					any_planet = {
						has_owner = yes
						owner = {
							is_country_type = primitive
							OR = {
								has_country_flag = stone_age
								has_country_flag = bronze_age
								has_country_flag = iron_age
								has_country_flag = late_medieval_age
								has_country_flag = renaissance_age
								has_country_flag = steam_age
								has_country_flag = industrial_age
								has_country_flag = machine_age
								has_country_flag = atomic_age
								has_country_flag = early_space_age
							}
						}
					}
				}
				
				set_star_flag = mem_regressors_second_solar_system
				set_star_flag = mem_regressors_pi_system
				save_event_target_as = second_system
				random_system_planet = {
					limit = {
						has_owner = yes
						owner = {
							is_country_type = primitive
							OR = {
								has_country_flag = stone_age
								has_country_flag = bronze_age
								has_country_flag = iron_age
								has_country_flag = late_medieval_age
								has_country_flag = renaissance_age
								has_country_flag = steam_age
								has_country_flag = industrial_age
								has_country_flag = machine_age
								has_country_flag = atomic_age
								has_country_flag = early_space_age
							}
						}
					}
					owner = {
						save_event_target_as = second_civ
					}
				}
			}
			
			#Picking third civ
			closest_system = {
				limit = {
					NOT = { has_star_flag = mem_regressors_pi_system }
					NOT = { has_star_flag = sol }
					any_planet = {
						has_owner = yes
						owner = {
							is_country_type = primitive
							OR = {
								has_country_flag = stone_age
								has_country_flag = bronze_age
								has_country_flag = iron_age
								has_country_flag = late_medieval_age
								has_country_flag = renaissance_age
								has_country_flag = steam_age
								has_country_flag = industrial_age
								has_country_flag = machine_age
								has_country_flag = atomic_age
								has_country_flag = early_space_age
							}
						}
					}
				}
				
				set_star_flag = mem_regressors_third_solar_system
				set_star_flag = mem_regressors_pi_system
				save_event_target_as = third_system
				random_system_planet = {
					limit = {
						has_owner = yes
						owner = {
							is_country_type = primitive
							OR = {
								has_country_flag = stone_age
								has_country_flag = bronze_age
								has_country_flag = iron_age
								has_country_flag = late_medieval_age
								has_country_flag = renaissance_age
								has_country_flag = steam_age
								has_country_flag = industrial_age
								has_country_flag = machine_age
								has_country_flag = atomic_age
								has_country_flag = early_space_age
							}
						}
					}
					owner = {
						save_event_target_as = third_civ
					}
				}
			}
		}
		
		#OK, we done here, transforming second civ
		event_target:second_civ = {
			#Ethic blanket cleanup
			country_remove_ethic = ethic_xenophile
			country_remove_ethic = ethic_xenophobe
			country_remove_ethic = ethic_pacifist
			country_remove_ethic = ethic_militarist
			country_remove_ethic = ethic_materialist
			country_remove_ethic = ethic_spiritualist
			country_remove_ethic = ethic_authoritarian
			country_remove_ethic = ethic_egalitarian
			country_remove_ethic = ethic_fanatic_xenophile
			country_remove_ethic = ethic_fanatic_xenophobe
			country_remove_ethic = ethic_fanatic_pacifist
			country_remove_ethic = ethic_fanatic_militarist
			country_remove_ethic = ethic_fanatic_materialist
			country_remove_ethic = ethic_fanatic_spiritualist
			country_remove_ethic = ethic_fanatic_authoritarian
			country_remove_ethic = ethic_fanatic_egalitarian
			
			# country_add_ethic = ethic_xenophobe
			country_add_ethic = ethic_authoritarian
			country_add_ethic = ethic_fanatic_materialist
			
			change_government = {
				authority = auth_oligarchic
				civics = {
					civic = civic_mem_rentier_capitalism
					civic = civic_mem_degenerate_elites
				}
			}
			change_country_flag = {
				icon = {
					category = "human"
					file = "flag_human_13.dds"
				}
				background= {
					category = "backgrounds"
					file = "00_solid.dds"
				}
				colors = {
					"dark_green"
					"dark_green"
					"null"
					"null"
				}
			}
			
			
			
			#Cleanup from vanilla
			remove_country_flag = stone_age
			remove_country_flag = bronze_age
			remove_country_flag = iron_age
			remove_country_flag = late_medieval_age
			remove_country_flag = renaissance_age
			remove_country_flag = steam_age
			remove_country_flag = industrial_age
			remove_country_flag = machine_age
			remove_country_flag = atomic_age
			remove_country_flag = early_space_age
			every_owned_fleet = {
				destroy_fleet = this
			}
			every_owned_army = {
				remove_army = yes
			}
			set_graphical_culture = industrial_01
			
			set_country_flag = mem_regressors_second_civ
			set_country_flag = mem_regressors_post_inflection
			set_primitive_age = mem_regressors_post_inflection
			
			capital_scope = {
				every_tile = {
					limit = { has_building = yes }
					remove_building = yes
				}
				every_tile = {
					limit = { has_blocker = yes }
					remove_blocker = yes
				}
				while = {
					count = 3
					random_tile = {
						limit = { has_blocker = no }
						set_blocker = tb_failing_infrastructure
					}
					random_tile = {
						limit = { has_blocker = no }
						set_blocker = tb_decrepit_dwellings
					}
				}
				every_tile = {
					limit = { has_pop = no has_blocker = no }
					create_pop = {
						species = owner
					}
				}
				every_owned_pop = {
					random_list = {
						# 33 = { pop_change_ethic = ethic_xenophobe }
						66 = { pop_change_ethic = ethic_materialist }
						33 = { pop_change_ethic = ethic_authoritarian }
					}
				}
				while = {
					count = 6
					create_army = {
						name = "Corporate Mercenaries"
						owner = prev
						species = prev
						type = "industrial_army"
					}
				}
				while = {
					count = 3
					random_tile = {
						limit = { has_blocker = no has_building = no }
						set_building = mem_regressors_corporate_hq
						clear_deposits = yes
					}
				}
				while = {
					limit = {
						any_tile = { has_blocker = no has_building = no }
					}
					random_tile = {
						limit = { has_blocker = no has_building = no }
						set_building = building_primitive_farm
						add_resource = {
							resource = food
							amount = 1
							replace = yes
						}
					}
					random_tile = {
						limit = { has_blocker = no has_building = no }
						set_building = building_primitive_factory
						add_resource = {
							resource = minerals
							amount = 1
							replace = yes
						}
					}
				}
				every_tile = {
					limit = { has_blocker = yes }
					clear_deposits = yes
				}
			}
		}
		
		#Transforming the third civ
		event_target:third_civ = {
			#Ethic blanket cleanup
			country_remove_ethic = ethic_xenophile
			country_remove_ethic = ethic_xenophobe
			country_remove_ethic = ethic_pacifist
			country_remove_ethic = ethic_militarist
			country_remove_ethic = ethic_materialist
			country_remove_ethic = ethic_spiritualist
			country_remove_ethic = ethic_authoritarian
			country_remove_ethic = ethic_egalitarian
			country_remove_ethic = ethic_fanatic_xenophile
			country_remove_ethic = ethic_fanatic_xenophobe
			country_remove_ethic = ethic_fanatic_pacifist
			country_remove_ethic = ethic_fanatic_militarist
			country_remove_ethic = ethic_fanatic_materialist
			country_remove_ethic = ethic_fanatic_spiritualist
			country_remove_ethic = ethic_fanatic_authoritarian
			country_remove_ethic = ethic_fanatic_egalitarian
			
			# country_add_ethic = ethic_xenophobe
			country_add_ethic = ethic_pacifist
			country_add_ethic = ethic_fanatic_materialist
		
			change_government = {
				authority = auth_oligarchic
				civics = {
					civic = civic_mem_relentless_hedonism
					civic = civic_mem_happiness_in_lobotomy
				}
			}
			change_country_flag = {
				icon = {
					category = "blocky"
					file = "flag_blocky_11.dds"
				}
				background= {
					category = "backgrounds"
					file = "00_solid.dds"
				}
				colors = {
					"pink"
					"pink"
					"null"
					"null"
				}
			}
			
			#Cleanup from vanilla
			remove_country_flag = stone_age
			remove_country_flag = bronze_age
			remove_country_flag = iron_age
			remove_country_flag = late_medieval_age
			remove_country_flag = renaissance_age
			remove_country_flag = steam_age
			remove_country_flag = industrial_age
			remove_country_flag = machine_age
			remove_country_flag = atomic_age
			remove_country_flag = early_space_age
			every_owned_fleet = {
				destroy_fleet = this
			}
			every_owned_army = {
				remove_army = yes
			}
			set_graphical_culture = industrial_01
			
			set_country_flag = mem_regressors_third_civ
			set_country_flag = mem_regressors_post_inflection
			set_primitive_age = mem_regressors_post_inflection
			
			capital_scope = {
				every_tile = {
					limit = { has_building = yes }
					remove_building = yes
				}
				every_tile = {
					limit = { has_blocker = yes }
					remove_blocker = yes
				}
				while = {
					count = 6
					random_tile = {
						limit = { has_blocker = no }
						set_blocker = tb_failing_infrastructure
					}
				}
				every_tile = {
					limit = { has_pop = no has_blocker = no }
					create_pop = {
						species = owner
					}
				}
				every_owned_pop = {
					random_list = {
						# 33 = { pop_change_ethic = ethic_xenophobe }
						66 = { pop_change_ethic = ethic_materialist }
						33 = { pop_change_ethic = ethic_pacifist }
					}
				}
				while = {
					count = 6
					create_army = {
						name = "Peacekeepers"
						owner = prev
						species = prev
						type = "industrial_army"
					}
				}
				random_tile = {
					limit = { has_blocker = no has_building = no }
					set_building = building_agri_processing_complex
					clear_deposits = yes
				}
				random_tile = {
					limit = { has_blocker = no has_building = no }
					set_building = building_ancient_factory
					clear_deposits = yes
				}
				
				every_tile = {
					limit = { has_blocker = no has_building = no }
					set_building = mem_regressors_pleasure_dome
					clear_deposits = yes
				}
				every_tile = {
					limit = { has_blocker = yes }
					clear_deposits = yes
				}
			}
		}
		random_country = {
			limit = { is_ai = no }
			country_event = {
				id = mem_regressors.1000
				days = 1
			}
		}
	}
}

#Discovering first civ
ship_event = {
	id = mem_regressors.100
	title = mem_regressors.100.name
	desc = mem_regressors.100.desc
	
	is_triggered_only = yes
	
	picture = GFX_evt_metropolis
	location = FROM
	
	trigger = {
		FROM = {
			has_owner = yes
			owner = {
				is_country_type = primitive
				has_country_flag = mem_regressors_first_civ
			}
		}
	}
	
	immediate = {
		owner = { set_country_flag = Story6 } #The story event is broken, and until devs fix it, I'm not going to try and call it or copy it. Maybe later when we bridge all primitives together we could make a knock-off
	}
	
	option = {
		name = mem_regressors.100.a.auth
		
		trigger = {
			owner = {
				OR = {
					has_ethic = ethic_authoritarian
					has_ethic = ethic_fanatic_authoritarian
				}
				NOR = {
					has_ethic = ethic_xenophile
					has_ethic = ethic_fanatic_xenophile
					has_ethic = ethic_xenophobe
					has_ethic = ethic_fanatic_xenophobe
				}
			}
		}
	}

	option = {
		name = mem_regressors.100.a.phile
		
		trigger = {
			owner = {
				OR = {
					has_ethic = ethic_xenophile
					has_ethic = ethic_fanatic_xenophile
					AND = {
						OR = {
							has_ethic = ethic_egalitarian
							has_ethic = ethic_fanatic_egalitarian
						}
						NOR = {
							has_ethic = ethic_xenophobe
							has_ethic = ethic_fanatic_xenophobe
						}
					}
				}
			}
		}
	}
	
	option = {
		name = mem_regressors.100.a.phobe
		
		trigger = {
			owner = {
				OR = {
					has_ethic = ethic_xenophobe
					has_ethic = ethic_fanatic_xenophobe
				}
			}
		}
	}
	
	option = {
		name = INTERESTING
		
		trigger = {
			owner = {
				NOR = {
					has_ethic = ethic_authoritarian
					has_ethic = ethic_fanatic_authoritarian
					has_ethic = ethic_xenophile
					has_ethic = ethic_fanatic_xenophile
					has_ethic = ethic_xenophobe
					has_ethic = ethic_fanatic_xenophobe
					AND = {
						OR = {
							has_ethic = ethic_egalitarian
							has_ethic = ethic_fanatic_egalitarian
						}
						NOR = {
							has_ethic = ethic_xenophobe
							has_ethic = ethic_fanatic_xenophobe
						}
					}
				}
			}
		}
	}
}

#Discovering second civ
ship_event = {
	id = mem_regressors.101
	title = mem_regressors.100.name
	desc = mem_regressors.101.desc
	
	is_triggered_only = yes
	
	picture = GFX_evt_metropolis
	location = FROM
	
	trigger = {
		FROM = {
			has_owner = yes
			owner = {
				is_country_type = primitive
				has_country_flag = mem_regressors_second_civ
			}
		}
	}
	
	immediate = {
		owner = { set_country_flag = Story6 } #The story event is broken, and until devs fix it, I'm not going to try and call it or copy it. Maybe later when we bridge all primitives together we could make a knock-off
	}
	
	option = {
		name = INTERESTING
	}
}

#Discovering third civ
ship_event = {
	id = mem_regressors.102
	title = mem_regressors.100.name
	desc = mem_regressors.102.desc
	
	is_triggered_only = yes
	
	picture = GFX_evt_metropolis
	location = FROM
	
	trigger = {
		FROM = {
			has_owner = yes
			owner = {
				is_country_type = primitive
				has_country_flag = mem_regressors_third_civ
			}
		}
	}
	
	immediate = {
		owner = { set_country_flag = Story6 } #The story event is broken, and until devs fix it, I'm not going to try and call it or copy it. Maybe later when we bridge all primitives together we could make a knock-off
	}
	
	option = {
		name = INTERESTING
		
		trigger = {
			owner = {
				NOR = {
					has_ethic = ethic_xenophobe
					has_ethic = ethic_fanatic_xenophobe
				}
			}
		}
	}
	
	option = {
		name = mem_regressors.102.a.phobe
		
		trigger = {
			owner = {
				has_ethic = ethic_xenophobe
				has_ethic = ethic_fanatic_xenophobe
			}
		}
	}
}

#Debug greetings event
country_event = {
	id = mem_regressors.1000
	title = mem_regressors.1000.name
	desc = mem_regressors.1000.desc
	
	is_triggered_only = yes
	
	picture = GFX_evt_alien_city
	
	option = {
		name = mem_regressors.1000.a
		
		create_point_of_interest = {
			id = mem_regressors_poi.1
			name = "FIRST"
			desc = "FIRST"
			location = event_target:first_system
		}
		create_point_of_interest = {
			id = mem_regressors_poi.2
			name = "SECOND"
			desc = "SECOND"
			location = event_target:second_system
		}
		create_point_of_interest = {
			id = mem_regressors_poi.3
			name = "THIRD"
			desc = "THIRD"
			location = event_target:third_system
		}
	}
	
	option = {
		name = mem_regressors.1000.b
	}
}

#########################################
#ACTUAL EVENTS HOLY HELL WE ARE DOING IT#
#########################################

#Making a discovery - hidden event that will notify player the civilization is acting weird. Each observation outpost controlled by player cuts MTTH in half, potentially bringing it down to 1/8 of based, and always cutting in half
country_event = {
	id = mem_regressors.2
	
	hide_window = yes
	
	mean_time_to_happen = {
		months = @MTTH
		
		modifier = {
			factor = 0.5
			any_country = {
				has_country_flag = mem_regressors_first_civ
				is_country_type = primitive
				capital_scope = {
					has_observation_outpost = yes
					observation_outpost_owner = { is_same_value = root }
				}
			}
		}
		
		modifier = {
			factor = 0.5
			any_country = {
				has_country_flag = mem_regressors_second_civ
				is_country_type = primitive
				capital_scope = {
					has_observation_outpost = yes
					observation_outpost_owner = { is_same_value = root }
				}
			}
		}
		
		modifier = {
			factor = 0.5
			any_country = {
				has_country_flag = mem_regressors_third_civ
				is_country_type = primitive
				capital_scope = {
					has_observation_outpost = yes
					observation_outpost_owner = { is_same_value = root }
				}
			}
		}
	}
	
	trigger = {
		is_ai = no
		NOT = { has_country_flag = mem_regressors_investigation_started }
		NOT = { has_global_flag = mem_regressors }
		any_country = {
			has_country_flag = mem_regressors_post_inflection
			is_country_type = primitive
			capital_scope = {
				has_observation_outpost = yes
				observation_outpost_owner = { is_same_value = root }
			}
		}
		any_country = { has_country_flag = mem_regressors_first_civ }
		any_country = { has_country_flag = mem_regressors_second_civ }
		any_country = { has_country_flag = mem_regressors_third_civ }
	}
	
	immediate = {
		set_country_flag = mem_regressors_investigation_started
		set_global_flag = mem_regressors
		random_country = {
			limit = {
				has_country_flag = mem_regressors_first_civ
				is_country_type = primitive
				capital_scope = {
					has_observation_outpost = yes
					observation_outpost_owner = { is_same_value = root }
				}
			}
			save_event_target_as = first_civ
		}
		random_country = {
			limit = {
				has_country_flag = mem_regressors_second_civ
				is_country_type = primitive
				capital_scope = {
					has_observation_outpost = yes
					observation_outpost_owner = { is_same_value = root }
				}
			}
			save_event_target_as = second_civ
		}
		random_country = {
			limit = {
				has_country_flag = mem_regressors_third_civ
				is_country_type = primitive
				capital_scope = {
					has_observation_outpost = yes
					observation_outpost_owner = { is_same_value = root }
				}
			}
			save_event_target_as = third_civ
		}
		
		#This is supposed to pick description based on 3, 2 or 1 discoveries
		IF = {
			limit = {
				exists = event_target:first_civ
				exists = event_target:second_civ
				exists = event_target:third_civ
			}
			country_event = { id = mem_regressors.203 }
			break = yes
		}
		
		IF = {
			limit = {
				exists = event_target:first_civ
				exists = event_target:second_civ
				NOT = { exists = event_target:third_civ }
			}
			event_target:first_civ = { save_event_target_as = first_desc_civ }
			event_target:second_civ = { save_event_target_as = second_desc_civ }
			random_country = {
				limit = { has_country_flag = mem_regressors_third_civ }
				save_event_target_as = first_missing_civ
			}
			country_event = { id = mem_regressors.202 }
			break = yes
		}
		
		IF = {
			limit = {
				exists = event_target:first_civ
				NOT = { exists = event_target:second_civ }
				exists = event_target:third_civ
			}
			event_target:first_civ = { save_event_target_as = first_desc_civ }
			event_target:third_civ = { save_event_target_as = second_desc_civ }
			random_country = {
				limit = { has_country_flag = mem_regressors_second_civ }
				save_event_target_as = first_missing_civ
			}
			country_event = { id = mem_regressors.202 }
			break = yes
		}
		
		IF = {
			limit = {
				NOT = { exists = event_target:first_civ }
				exists = event_target:second_civ
				exists = event_target:third_civ
			}
			event_target:second_civ = { save_event_target_as = first_desc_civ }
			event_target:third_civ = { save_event_target_as = second_desc_civ }
			random_country = {
				limit = { has_country_flag = mem_regressors_first_civ }
				save_event_target_as = first_missing_civ
			}
			country_event = { id = mem_regressors.202 }
			break = yes
		}
		
		IF = {
			limit = {
				exists = event_target:first_civ
				NOT = { exists = event_target:second_civ }
				NOT = { exists = event_target:third_civ }
			}
			event_target:first_civ = { save_event_target_as = desc_civ }
			random_country = {
				limit = { has_country_flag = mem_regressors_second_civ }
				save_event_target_as = first_missing_civ
			}
			random_country = {
				limit = { has_country_flag = mem_regressors_third_civ }
				save_event_target_as = second_missing_civ
			}
			country_event = { id = mem_regressors.201 }
			break = yes
		}
		
		IF = {
			limit = {
				NOT = { exists = event_target:first_civ }
				exists = event_target:second_civ 
				NOT = { exists = event_target:third_civ }
			}
			event_target:second_civ = { save_event_target_as = desc_civ }
			random_country = {
				limit = { has_country_flag = mem_regressors_first_civ }
				save_event_target_as = first_missing_civ
			}
			random_country = {
				limit = { has_country_flag = mem_regressors_third_civ }
				save_event_target_as = second_missing_civ
			}
			country_event = { id = mem_regressors.201 }
			break = yes
		}
		
		IF = {
			limit = {
				NOT = { exists = event_target:first_civ }
				NOT = { exists = event_target:second_civ }
				exists = event_target:third_civ
			}
			event_target:third_civ = { save_event_target_as = desc_civ }
			random_country = {
				limit = { has_country_flag = mem_regressors_first_civ }
				save_event_target_as = first_missing_civ
			}
			random_country = {
				limit = { has_country_flag = mem_regressors_second_civ }
				save_event_target_as = second_missing_civ
			}
			country_event = { id = mem_regressors.201 }
			break = yes
		}
	}
}

#Single outpost event. first_desc_civ - the only civ we are observing
country_event = {
	id = mem_regressors.201
	title = mem_regressors.201.name
	desc = mem_regressors.201.desc
	
	is_triggered_only = yes
	
	picture = GFX_evt_satellite_in_orbit
	location = event_target:first_desc_civ
	
	immediate = {
	}
	
	option = { #Mission accepted
		name = mem_regressors.201.a
		
		begin_event_chain = {
			event_chain = "mem_regressors_mystery_chain"
			target = root
		}
		hidden_effect = {
			add_event_chain_counter = { 
				event_chain = "mem_regressors_mystery_chain" 
				counter = "mem_regressors_outposts_checked" 
				amount = 1 
			}
		}
		enable_special_project = {	
			owner = root
			name = "MEM_REGRESSORS_OUTPOST_I"
			location = event_target:first_missing_civ.capital_scope 
		}
		enable_special_project = {	
			owner = root
			name = "MEM_REGRESSORS_OUTPOST_II"
			location = event_target:second_missing_civ.capital_scope 
		}
	}
	
	option = { #We have no time for this
		name = mem_regressors.201.b
		
		add_monthly_resource_mult = {
			resource = influence
			value = @tier1influencereward
			min = @tier1influencemin
			max = @tier1influencemax
		}
		
		remove_global_flag = mem_regressors
	}
	
	after = {
		add_monthly_resource_mult = {
			resource = society_research
			value = @tier1researchreward
			min = @tier1researchmin
			max = @tier1researchmax
		}
	}
}

#Two civilizations observed first_desc_civ and second_desc_civ
country_event = {
	id = mem_regressors.202
	title = mem_regressors.201.name
	desc = mem_regressors.202.desc
	
	is_triggered_only = yes
	
	picture = GFX_evt_satellite_in_orbit
	location = event_target:first_desc_civ
	
	immediate = {
	}
	
	option = { #Mission accepted
		name = mem_regressors.202.a
		
		begin_event_chain = {
			event_chain = "mem_regressors_mystery_chain"
			target = root
		}
		hidden_effect = {
			add_event_chain_counter = { 
				event_chain = "mem_regressors_mystery_chain" 
				counter = "mem_regressors_outposts_checked" 
				amount = 2
			}
		}
		enable_special_project = {	
			owner = root
			name = "MEM_REGRESSORS_OUTPOST_I"
			location = event_target:first_missing_civ.capital_scope 
		}
	}
	
	option = { #We have no time for this
		name = mem_regressors.201.b
		
		add_monthly_resource_mult = {
			resource = influence
			value = @tier1influencereward
			min = @tier1influencemin
			max = @tier1influencemax
		}
		
		remove_global_flag = mem_regressors
	}
	
	after = {
		add_monthly_resource_mult = {
			resource = society_research
			value = @tier2researchreward
			min = @tier2researchmin
			max = @tier2researchmax
		}
	}
}

#All three are observed, simply known by numbers
country_event = {
	id = mem_regressors.203
	title = mem_regressors.201.name
	desc = mem_regressors.203.desc
	
	is_triggered_only = yes
	
	picture = GFX_evt_satellite_in_orbit
	location = event_target:first_civ
	
	immediate = {
	}
	
	immediate = { set_country_flag = mem_regressors_found_all_outposts }
	
	option = { #Mission accepted
		name = mem_regressors.203.a
		
		begin_event_chain = {
			event_chain = "mem_regressors_mystery_chain"
			target = root
		}
		hidden_effect = {
			add_event_chain_counter = { 
				event_chain = "mem_regressors_mystery_chain" 
				counter = "mem_regressors_outposts_checked" 
				amount = 3
			}
		}		
		enable_special_project = {	
			owner = root
			name = "MEM_REGRESSORS_DECYPHER"
			location = root.capital_scope
		}
	}
	
	option = { #We have no time for this
		name = mem_regressors.201.b
		
		add_monthly_resource_mult = {
			resource = influence
			value = @tier1influencereward
			min = @tier1influencemin
			max = @tier1influencemax
		}
		
		remove_global_flag = mem_regressors
	}
	
	after = {
		add_monthly_resource_mult = {
			resource = society_research
			value = @tier3researchreward
			min = @tier3researchmin
			max = @tier3researchmax
		}
	}
}

#Counter increased on special project completion 
ship_event = {
	id = mem_regressors.204
	title = mem_regressors.204.name
	desc = mem_regressors.204.desc
	
	is_triggered_only = yes
	
	picture = GFX_evt_satellite_in_orbit
	location = root
	
	immediate = {

	}
	
	option = {
		name = EXCELLENT
		
		owner = {
			add_event_chain_counter = { 
				event_chain = "mem_regressors_mystery_chain" 
				counter = "mem_regressors_outposts_checked" 
				amount = 1
			}
			hidden_effect = {
				country_event = { id = mem_regressors.205 days = 30 }
			}
		}
	}
}

#Collection completion
country_event = {
	id = mem_regressors.205
	title = mem_regressors.205.name
	desc = mem_regressors.205.desc
	
	is_triggered_only = yes
	
	picture = GFX_evt_star_chart
	
	trigger = {
		has_completed_event_chain_counter = {
			event_chain = "mem_regressors_mystery_chain"
			counter = "mem_regressors_outposts_checked"
		}
		NOT = { has_country_flag = mem_regressors_found_all_outposts }
	}
	
	immediate = {
		set_country_flag = mem_regressors_found_all_outposts
	}
	
	option = {
		name = mem_regressors.205.a
		
		enable_special_project = {	
			owner = root
			name = "MEM_REGRESSORS_DECYPHER"
			location = root.capital_scope
		}
	}
}

#Special project DECYPHER is complete
country_event = {
	id = mem_regressors.206
	title = mem_regressors.206.name
	desc = mem_regressors.206.desc
	
	is_triggered_only = yes
	
	picture = GFX_evt_star_chart
	
	immediate = {
		random_owned_leader = {
			limit = { leader_class = scientist is_researching_area = society }
			save_event_target_as = science_candidate
		}
		random_owned_leader = {
			limit = { leader_class = ruler }
			save_event_target_as = ruler_candidate
		}
	}
	
	option = {
		name = mem_regressors.206.a
		custom_tooltip = mem_regressors.206.a.tooltip
	
		hidden_effect = {
			random_system = {
				limit = { has_star_flag = mem_regressors_pi_system }
				save_event_target_as = spawner
				spawn_system = {
					min_distance = 20
					max_distance = 50
					initializer = "mem_regressors_central_system"
				}
			}
			random_system = {
				limit = { has_star_flag = mem_regressors_central_system }
				random_system_planet = {
					limit = { has_planet_flag = mem_regressors_asteroid }
					surveyed = {
						set_surveyed = yes
						surveyor = root
					}
					save_event_target_as = asteroid_base
				}
			}
		}
		enable_special_project = {	
			owner = root
			name = "MEM_REGRESSORS_ASTEROID_BASE"
			location = event_target:asteroid_base
		}
	}
	
	option = {
		name = mem_regressors.206.b
		
		add_monthly_resource_mult = {
			resource = society_research
			value = @tier5researchreward
			min = @tier5researchmin
			max = @tier5researchmax
		}
		end_event_chain = mem_regressors_mystery_chain
	}
	
	option = {
		name = mem_regressors.206.c
		
		trigger = {
			exists  = event_target:science_candidate
			NOT = { has_ethic = ethic_hive_mind }
		}
		
		event_target:science_candidate = {
			IF = {
				limit = { NOT = { has_trait = leader_trait_expertise_statecraft } }
				add_trait = leader_trait_expertise_statecraft
			}
			IF = {
				limit = { NOT = { has_trait = leader_trait_paranoid } }
				add_trait = leader_trait_paranoid
			}
			add_trait = mem_regressors_leader_trait_memetic_engineer
		}
		
		end_event_chain = mem_regressors_mystery_chain
	}
	
	option = {
		name = mem_regressors.206.d
		
		trigger = {
			exists  = event_target:ruler_candidate
			NOT = { has_ethic = ethic_hive_mind }
		}
		
		event_target:ruler_candidate = {
			add_trait = mem_regressors_leader_trait_memetic_engineer_ruler
		}
		
		end_event_chain = mem_regressors_mystery_chain
	}
}

################
#SECOND CHAPTER#
################

ship_event = {
	id = mem_regressors.300
	title = mem_regressors.300.name
	desc = mem_regressors.300.desc
	
	is_triggered_only = yes
	
	picture = GFX_evt_mining_station
	location = event_target:asteroid_base
	
	immediate = {
		owner = { set_country_flag = mem_regressors_started_signal }
		random_system = {
			limit = { 
				has_star_flag = mem_regressors_pi_system 
				NOT = { is_same_value = event_target:spawner }
			}
			set_star_flag = mem_regressors_entrance
			random_system_planet = {
				limit = { is_star = yes }
				set_planet_flag = mem_regressors_transmitter_star
				save_event_target_as = transmitter_star
			}
		}
	}
	
	option = {
		name = mem_regressors.300.a
		
		owner = {
			end_event_chain = mem_regressors_mystery_chain
			begin_event_chain = {
				event_chain = "mem_regressors_signal_chain"
				target = this
			}
			enable_special_project = {	
				owner = this
				name = "MEM_REGRESSORS_STAR_TRANSMITTER"
				location = event_target:transmitter_star 
			}

		}
		
		event_target:asteroid_base = {
			orbital_deposit_tile = { add_deposit = d_enormous1_society_deposit }
		}
	}
}

ship_event = {
	id = mem_regressors.301
	title = mem_regressors.301.name
	desc = mem_regressors.301.desc
	
	is_triggered_only = yes
	
	picture = GFX_evt_satellite_in_orbit
	
	option = {
		name = mem_regressors.301.a
		custom_tooltip = mem_regressors.301.a.tooltip
		
		owner = { set_country_flag = mem_regressors_can_build_angler }
	}
}

####################################################################
#CHAPTER THREE: In which we are harassed by aliens over the angler #
####################################################################

#On building built for the first time
planet_event = {
	id = mem_regressors.400
	title = mem_regressors.400.name
	desc = mem_regressors.400.desc
	
	is_triggered_only = yes
	
	picture = GFX_evt_physics_research
	
	trigger = {
		owner = {
			NOT = { has_country_flag = mem_regressors_began_angler }
		}
		FROM = {
			has_building = mem_regressors_angler
		}
	}
	
	immediate = {
		owner = {
			set_country_flag = mem_regressors_began_angler
			remove_country_flag = mem_regressors_can_build_angler
		}
		save_event_target_as = angler_planet
		random_planet = {
			limit = { has_planet_flag = mem_regressors_transmitter_star }
			spawn_system = {
				min_distance = 20
				max_distance = 50
				initializer = "mem_regressors_guardians_system"
			}
		}
		random_system = {
			limit = { has_star_flag = mem_regressors_guardians_system }
			save_event_target_as = guardians_system
			random_system_planet = {
				limit = { is_star = yes }
				save_event_target_as = guardians_star
			}
		}
		create_country = {
			name = NAME_mem_regressors_guardians
			type = faction
			auto_delete = no
			
		}
		last_created_country = {
			set_graphical_culture = pirate_01
			set_country_flag = mem_regressors_guardians_country
			establish_communications_no_message = root.owner
			create_fleet = {
				name = NAME_mem_regressors_first_fleet
				effect = {
					set_aggro_range = 0
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = self
					set_owner = PREV
					set_fleet_flag = mem_regressors_first_guardians
					create_ship = {
						name = NAME_mem_regressor_capital_ship
						design = NAME_Spearhead
					}
					while = {
						count = 6
						create_ship = {
							name = NAME_mem_regressors_escort
							design = NAME_Bug_Crusher
						}
					}
					set_location = event_target:guardians_star
				}
			}
		}
	}
	
	option = {
		name = ONSCREEN
		
		hidden_effect = {
			owner = { country_event = { id = mem_regressors.401 } }
		}
	}
}

#Diplomatic windown to stop

country_event = {
	id = mem_regressors.401
	title = TRANSMISSION
	desc = mem_regressors.401.desc
	
	diplomatic = yes
	
	is_triggered_only = yes
	
	picture_event_data = {
		room = no_video_feed_room
	}
	
	location = event_target:guardians_star
	
	option = {
		name = mem_regressors.401.a
		custom_tooltip = mem_regressors.401.a.tooltip
		
		set_country_flag = mem_regressors_responded
		
		hidden_effect = {
			set_country_flag = mem_regressors_can_build_angler
			every_owned_planet = {
				limit = { has_building = mem_regressors_angler }
				every_tile = {
					limit = { has_building = mem_regressors_angler }
					remove_building = yes
				}
			}
		}
	}
	
	option = {
		name = mem_regressors.401.b
		custom_tooltip = mem_regressors.401.b.tooltip
		
		set_country_flag = mem_regressors_responded
		
		hidden_effect = {
			random_owned_planet = {
				limit = { has_building = mem_regressors_angler }
				save_event_target_as = angler_planet
				solar_system = { save_event_target_as = angler_system }
			}
			random_country = {
				limit = { has_country_flag = mem_regressors_guardians_country }
				random_owned_fleet = {
					limit = { has_fleet_flag = mem_regressors_first_guardians }
					fleet_event = { id = mem_regressors.402 }
				}
			}
		}
	}
	
	option = {
		name = mem_regressors.401.c
		response_text = mem_regressors.401.c.response
		is_dialog_only = yes
	}
	
	option = {
		name = mem_regressors.401.d
		response_text = mem_regressors.401.d.response
		is_dialog_only = yes
	}
	
	option = {
		name = mem_regressors.401.e
		response_text = mem_regressors.401.e.response
		is_dialog_only = yes
	}
}

#Queue to attack
fleet_event = {
	id = mem_regressors.402
	
	hide_window = yes
	
	is_triggered_only = yes
	
	trigger = {
		exists = event_target:angler_planet
	}
	
	immediate = {
		set_global_flag = mem_regressors_already_targeted
		clear_fleet_actions = root
		queue_actions = {
			find_closest_system = {
				trigger = {
					id = mem_regressors.trigger.attack.1
					is_same_value = event_target:angler_system
				}
				found_system = {
					move_to = this
					find_closest_planet = {
						trigger = {
							id = mem_regressors.trigger.attack.2
							is_planet = event_target:angler_planet
						}
						found_planet = {
							move_to = this
							orbit_planet = this
							effect = {
								id = mem_regressors.trigger.attack.3
								planet_event = { id = mem_regressors.406 } #Ruined everything
							}
						}
					}
				}
			}
		}
	}
}

#Triggered on rebuilding the angler
planet_event = {
	id = mem_regressors.403
	# title = "COMPLETE"
	# desc = "COMPLETE"
	
	hide_window = yes
	
	# mean_time_to_happen = {
		# months = 1
	# }
	
	is_triggered_only = yes
	
	trigger = {
		NOT = { has_global_flag = mem_regressors_already_targeted }
		NOT = { has_global_flag = mem_regressors_guardians_defeated }
		has_owner = yes
		owner = {
			has_country_flag = mem_regressors_responded
		}
		from = {
			has_building = mem_regressors_angler
		}
	}
	
	immediate = {
		owner = { remove_country_flag = mem_regressors_can_build_angler }
		save_event_target_as = angler_planet
		solar_system = { save_event_target_as = angler_system }
		
		random_country = {
			limit = { has_country_flag = mem_regressors_guardians_country }
			random_owned_fleet = {
				limit = { has_fleet_flag = mem_regressors_first_guardians }
				fleet_event = { id = mem_regressors.402 }
			}
		}
	}
	
	# option = {
		# name = OK
	# }
}

#On building destroyed or replaced
planet_event = {
	id = mem_regressors.404
	
	hide_window = yes
	
	is_triggered_only = yes
	
	trigger = {
		NOT = { has_global_flag = mem_regressors_guardians_defeated }
		owner = {
			has_country_flag = mem_regressors_responded
		}
		FROM = {
			has_prev_building = mem_regressors_angler
		}
	}
	
	immediate = {
		owner = { set_country_flag = mem_regressors_can_build_angler }
		
		
		
		
		random_country = {
			limit = { has_country_flag = mem_regressors_guardians_country }
			random_owned_fleet = {
				limit = { has_fleet_flag = mem_regressors_first_guardians }
				fleet_event = { id = mem_regressors.405 }
			}
		}
	}
}

#Queue to retreat
fleet_event = {
	id = mem_regressors.405
	
	hide_window = yes
	
	is_triggered_only = yes
	
	# trigger = {
		# exists = event_target:transmitter_star
	# }
	
	immediate = {
		remove_global_flag = mem_regressors_already_targeted
		random_planet = {
			limit = { has_planet_flag = mem_regressors_transmitter_star }
			save_event_target_as = transmitter_star
		}
		clear_fleet_actions = root
		queue_actions = {
			find_closest_system = {
				trigger = {
					id = mem_regressors.trigger.retreat
					has_star_flag = mem_regressors_guardians_system
				}
				found_system = {
					move_to = this
				}
			}
		}
	}
}

#On arrival, they nuke all things
planet_event = {
	id = mem_regressors.406
	title = mem_regressors.406.name
	desc = mem_regressors.406.desc
	
	is_triggered_only = yes
	
	picture = GFX_evt_nuclear_explosion
	location = root
	
	trigger = {
		has_building = mem_regressors_angler
	}
	
	immediate = {
		random_tile = {
			limit = { has_building = mem_regressors_angler }
			remove_building = yes
			kill_pop = yes
			set_blocker = tb_radioactive_wasteland
		}
		
		
		random_country = {
			limit = { has_country_flag = mem_regressors_guardians_country }
			random_owned_fleet = {
				limit = { has_fleet_flag = mem_regressors_first_guardians }
				fleet_event = { id = mem_regressors.405 }
			}
		}
	}
	
	option = {
		name = TERRIBLE
		
		owner = {
			end_event_chain = mem_regressors_signal_chain
		}
	}
}

#Hidden event to determine if enemy has been destroyed
country_event = {
	id = mem_regressors.407
	
	hide_window = yes
	
	is_triggered_only = yes
	
	trigger = {
		is_country_type = faction
		has_country_flag = mem_regressors_guardians_country
		fromfrom = {
			has_fleet_flag = mem_regressors_first_guardians
		}
	}
	
	immediate = {
		set_global_flag = mem_regressors_guardians_defeated
		IF = {
			limit = {
				from = { has_country_flag = mem_regressors_began_angler }
			}
			from = { country_event = { id = mem_regressors.408 } }
			else = {
				random_country = {
					limit = { has_country_flag = mem_regressors.409 }
				}
			}
		}
	}
}

#Player is notified they have beaten guardians
country_event = {
	id = mem_regressors.408
	title = mem_regressors.408.name
	desc = mem_regressors.408.desc
	
	picture = GFX_evt_debris
	
	is_triggered_only = yes
	
	option = {
		name = EXCELLENT
		
		add_monthly_resource_mult = {
			resource = unity
			value = @tier3researchreward
			min = @tier3researchmin
			max = @tier3researchmax
		}
	}
}

#Player is notified that someone else beaten guardians
country_event = {
	id = mem_regressors.409
	title = mem_regressors.409.name
	desc = mem_regressors.409.desc
	
	picture = GFX_evt_debris
	
	is_triggered_only = yes
	
	option = {
		name = EXCELLENT
	}
}

#Country event to picking up signal
country_event = {
	id = mem_regressors.410
	title = mem_regressors.410.name
	desc = mem_regressors.410.name
	
	picture = GFX_evt_star_chart
	
	mean_time_to_happen = {
		months = @MTTH_SUCCESS
	}
	
	trigger = {
		has_country_flag = mem_regressors_began_angler
		NOT = { has_country_flag = mem_regressors_angler_complete }
		has_global_flag = mem_regressors_guardians_defeated
		any_owned_planet = {
			has_building = mem_regressors_angler
		}
	}
	
	immediate = {
		set_country_flag = mem_regressors_angler_complete
	}
	
	option = {
		name = mem_regressors.410.a
		custom_tooltip = mem_regressors.401.a.tooltip
		
		hidden_effect = {
			random_system = {
				limit = { has_star_flag = mem_regressors_pi_system }
				spawn_system = {
					min_distance = 20
					max_distance = 120
					initializer = mem_regressors_final_system
				}
			}
			
			random_system = {
				limit = { has_star_flag = mem_regressors_final_system }
				save_event_target_as = final_system
			}
		}
		
		create_point_of_interest = {
			id = mem_regressors_poi.final
			name = "mem_regressors_poi.final"
			desc = "mem_regressors_poi.final.desc"
			location = event_target:final_system
			event_chain = "mem_regressors_signal_chain"
		}
	}
}

###############
#FINAL CHAPTER#
###############

#on entering final system
ship_event = {
	id = mem_regressors.500
	title = mem_regressors.500.name
	desc = mem_regressors.500.desc
	
	picture = GFX_evt_ship_in_orbit
	location = FROM
	
	is_triggered_only = yes
	
	trigger = {
		owner = { 
			has_country_flag = mem_regressors_angler_complete 
			NOT = { has_country_flag = mem_regressors_entered_final }
		}
		from = { has_star_flag = mem_regressors_final_system }
	}
	
	immediate = {
		owner = {
			set_country_flag = mem_regressors_entered_final
		}
		
		create_country = {
			name = NAME_mem_regressors_finals
			type = faction
			auto_delete = no
		}
		last_created_country = {
			set_country_flag = mem_regressors_final_country
			add_modifier = { modifier = sanctuary_power days = -1 }
			save_event_target_as = final_country
		}
	
		from = {
			random_system_planet = {
				limit = { has_planet_flag = mem_regressors_gas_central }
				create_fleet = {
					name = NAME_mem_regressors_final_boss
					effect = {
						set_aggro_range = 100
						set_fleet_stance = aggressive
						set_aggro_range_measure_from = self
						set_owner = event_target:final_country
						set_fleet_flag = mem_regressors_final_boss
						create_ship = {
							name = NAME_mem_regressor_final_boss
							design = NAME_Imperium
							graphical_culture = "fallen_empire_04"
							
							effect = {
								set_disable_at_health = 0.05
								set_ship_flag = mem_regressors_final_boss
							}
						}
						set_location = prev
					}
				}
			}
			random_system_planet = {
				limit = { has_planet_flag = mem_regressors_gas_moon_one }
				create_fleet = {
					name = NAME_mem_regressors_final_battleships
					effect = {
						set_aggro_range = 100
						set_fleet_stance = aggressive
						set_aggro_range_measure_from = self
						set_owner = event_target:final_country
						
						while = {
							count = 5
							create_ship = NAME_mem_regressor_final_battleship
							design = NAME_Spearhead
						}

						set_location = prev
					}
				}
			}
			
			random_system_planet = {
				limit = { has_planet_flag = mem_regressors_gas_moon_two }
				create_fleet = {
					name = NAME_mem_regressors_final_cruisers
					effect = {
						set_aggro_range = 100
						set_fleet_stance = aggressive
						set_aggro_range_measure_from = self
						set_owner = event_target:final_country
						
						while = {
							count = 10
							create_ship = NAME_mem_regressor_final_cruiser
							design = NAME_Deaths_Head
						}

						set_location = prev
					}
				}
			}
			
			random_system_planet = {
				limit = { has_planet_flag = mem_regressors_gas_moon_three }
				create_fleet = {
					name = NAME_mem_regressors_final_destroyers
					effect = {
						set_aggro_range = 100
						set_fleet_stance = aggressive
						set_aggro_range_measure_from = self
						set_owner = event_target:final_country
						
						while = {
							count = 20
							create_ship = NAME_mem_regressor_final_destroyer
							design = NAME_Bug_Crusher
						}

						set_location = prev
					}
				}
			}
			
			random_system_planet = {
				limit = { has_planet_flag = mem_regressors_gas_moon_four }
				create_fleet = {
					name = NAME_mem_regressors_final_corvettes
					effect = {
						set_aggro_range = 100
						set_fleet_stance = aggressive
						set_aggro_range_measure_from = self
						set_owner = event_target:final_country
						
						while = {
							count = 40
							create_ship = NAME_mem_regressor_final_corvette
							design = NAME_Blade
						}

						set_location = prev
					}
				}
			}
		}
	}
	
	option = {
		name = mem_regressors.500.a
	}
}

#Hidden event on boss disabled
ship_event = {
	id = mem_regressors.600
	
	hide_window = yes
	
	is_triggered_only = yes
	
	trigger = {
		has_ship_flag = mem_regressors_final_boss
	}
	
	immediate = {
		FROM = {
			owner = {
				IF = {
					limit = { has_country_flag = mem_regressors_entered_final }
					country_event = { id = mem_regressors.601 }
					else = {
						random_country = {
							limit = { has_country_flag = mem_regressors_entered_final }
							country_event = { id = mem_regressors.602 }
						}
					}
				}
			}
		}
	}
}

#Country event to notify player that he beaten the boss
country_event = {
	id = mem_regressors.601
	title = mem_regressors.601.name
	desc = mem_regressors.601.desc
	
	picture = GFX_evt_debris
	location = FROM
	
	is_triggered_only = yes
	
	immediate = {
		set_country_flag = mem_regressors_boss_beaten
		
		from = { save_event_target_as = the_boss }
	}
	
	option = {
		mem_regressors.601.a
		
		add_monthly_resource_mult = {
			resource = unity
			value = @tier3researchreward
			min = @tier3researchmin
			max = @tier3researchmax
		}
		
		enable_special_project = {	
			owner = this
			name = "MEM_REGRESSORS_FINAL_BOSS"
			location = from 
		}
	}
}

#Country event to notify player that someone else beaten the boss
country_event = {
	id = mem_regressors.602
	title = mem_regressors.602.name
	desc = mem_regressors.602.desc
	
	picture = GFX_evt_debris
	location = FROM
	
	is_triggered_only = yes
	
	immediate = {
		set_country_flag = mem_regressors_boss_beaten
		
		from = { save_event_target_as = the_boss }
	}
	
	option = {
		mem_regressors.601.a
		
		enable_special_project = {	
			owner = this
			name = "MEM_REGRESSORS_FINAL_BOSS"
			location = from 
		}
	}
}

#Finalized the project
ship_event = {
	id = mem_regressors.603
	title = mem_regressors.603.name
	desc = mem_regressors.603.desc
	
	picture = GFX_evt_debris
	location = event_target:the_boss
	
	is_triggered_only = yes
	
	immediate = {
		set_country_flag = mem_regressors_finished
		set_global_flag = mem_regressors_finished
		
		owner = { save_event_target_as = the_winner }
	}
	
	option = {
		mem_regressors.603.a
		mem_regressors.603.a.tooltip
		
		hidden_effect = {
			create_fleet = {
				name = NAME_mem_regressors_final_boss
				effect = {
					set_aggro_range = 100
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = self
					set_owner = event_target:the_winner
					set_fleet_flag = mem_regressors_final_boss
					create_ship = {
						name = NAME_mem_regressor_final_boss
						design = NAME_Imperium
						graphical_culture = "fallen_empire_04"
					}
					set_location = event_target:the_boss
				}
			}
		}
	}
	
	option = {
		name = mem_regressors.603.b
		custom_tooltip = mem_regressors.603.b.tooltip
		
		set_country_flag = mem_regressors_enable_civic
	}
	
	option = {
		name = mem_regressors.603.c
		
		owner = {
			add_monthly_resource_mult = {
				resource = influence
				value = @tier4influencereward
				min = @tier4influencemin
				max = @tier4influencemax
			}
			
			add_monthly_resource_mult = {
				resource = unity
				value = @tier5researchreward
				min = @tier5researchmin
				max = @tier5researchmax
			}
		}
	}
	
	option = {
		mem_regressors.603.d
		
		owner = {
			IF = {
				limit = {
					host_has_dlc = "Utopia"
					NOT = { has_technology = tech_ascension_theory }
				}
				add_research_option = tech_ascension_theory
				add_tech_progress = {
					tech = tech_ascension_theory
					progress = 0.05
				}
				else = {
					add_monthly_resource_mult = {
						resource = society_research
						value = 100
						min = 600
						max = 6000
					}
				}
			}
		}
	}
	
	after = {
		hidden_effect = {
			event_target:the_boss = {
				fleet = { delete_fleet = yes }
			}
		}
		end_event_chain = mem_regressors_signal_chain
	}
}